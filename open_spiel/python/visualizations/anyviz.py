#region Imports ...from anytree import Node, AnyNode, RenderTree, ContRoundStylefrom anytree.exporter import UniqueDotExporterfrom os import linesepimport syssys.path.append("/Users/tylerchurchill/CLionProjects/open_spiel")sys.path.append("/Users/tylerchurchill/CLionProjects/open_spiel/build/python")import pyspiel#endregiondef get_state_type(state):    if state.is_chance_node():        return 'chance'    elif state.is_terminal():        return 'terminal'    else:        return 'decision'def get_color(state):    if state.is_chance_node():        return 'green'    elif state.is_terminal():        return 'red'    else:        return 'blue'def get_shape(state):    if state.is_chance_node():        return 'box'    elif state.is_terminal():        return 'diamond'    else:        return 'box'def build_tree(state, parent_node, depth=0, limit=2):    if depth > limit:        return    elif state.is_terminal():        return    elif state.is_chance_node():        for outcome in state.chance_outcomes():            child = state.child(outcome[0])            child_node = Node(str(child),                player  = child.current_player(),                action  = child.action_to_string(outcome[0]),                type    = get_state_type(child),                rewards = child.rewards()[0],                returns = child.returns()[0],                parent  = parent_node            )            build_tree(child, child_node, depth=depth+1, limit=limit)    else:        for action in state.legal_actions():            child = state.child(action)            child_node = Node(str(child),                player  = child.current_player(),                action  = child.action_to_string(action),                type    = get_state_type(child),                rewards = child.rewards()[0],                returns = child.returns()[0],                parent  = parent_node            )            build_tree(child, child_node, depth=depth+1, limit=limit)def format_label(state):    label = str(state)    split_lines = label.splitlines()    split_lines = [line for line in split_lines if line]    join_lines = "\l".join(split_lines)    print(join_lines)    return join_linesif __name__ == '__main__':    game   = pyspiel.load_game('solitaire')    root   = game.new_initial_state()    root   = root.child(1)    parent = Node(str(root),        player  = root.current_player(),        action  = None,        type    = get_state_type(root),        returns = root.returns()[0],        rewards = root.rewards()[0]    )    build_tree(root, parent_node=parent)    print(RenderTree(parent, style=ContRoundStyle).by_attr('action'))    '''        dot_graph = UniqueDotExporter(        parent,        name = 'game_tree_viz',        options = ['layout=dot'],        #nodenamefunc = lambda n: f"{n.returns}",        nodeattrfunc = lambda n: f"color={n.color}, shape={n.shape}, labeljust=l",        edgetypefunc = lambda n, m: f"->",        edgeattrfunc = lambda n, m: f"action={m.action}, color=red, label={m.action}",    )    #for line in dot_graph:    #    print(line)    dot_graph.to_picture('dot_graph.png')    '''